import IUser from "@/interfaces/IUser";
import React, { createContext, useContext, useState, useEffect } from "react";

export type Language = "en" | "ar";
export type UserType = "buyer" | "seller";

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  isRTL: boolean;
  t: (key: string, options?: { [key: string]: string | number }) => string;
  user: IUser | null;
  login: (user: IUser) => void;
  logout: () => void;
  isAuthenticated: boolean;
  hasToken: () => boolean;
  isLanguageTransitioning: boolean;
  triggerLanguageAnimation: () => void;
}

const translations = {
  en: {
    // Navigation
    "nav.home": "Home",
    "nav.properties": "Properties",
    "nav.dashboard": "Dashboard",
    "nav.login": "Login",
    "nav.register": "Register",
    "nav.logout": "Logout",
    "nav.language": "English",
    "nav.profile": "Profile",
    "nav.settings": "Settings",
    "nav.profileActions": "Profile Actions",
    "nav.light": "Light Mode",
    "nav.dark": "Dark Mode",
    "nav.currency": "Currency",
    "nav.favorites": "Favorites",
    "nav.owner": "Owner Dashboard",

    //Owner
    "owner.subtitle": "Manage your properties and track performance",
    "owner.addProperty": "Add Property",
    "owner.totalProperties": "Total Properties",
    "owner.activeListings": "Active Listings",
    "owner.totalValue": "Total Value",
    "owner.error.statsLoadFailed": "Failed to load dashboard statistics",
    "owner.noProperties": "No Properties Yet",
    "owner.noPropertiesDescription": "Start by adding your first property listing",
    "owner.addFirstProperty": "Add Your First Property",

    // Toast messages
    "toast.logoutSuccess": "Logout successful",
    "toast.seeYouAgain": "See you again!",
    "toast.logoutFailed": "Logout failed",
    "toast.error": "An error occurred",

    // Error messages
    "error.loadFailed": "Failed to load properties",
    "error.loadProfile": "Failed to load profile data",
    "error.tryAgain":
      "There was a problem fetching the properties. Please try again later.",
    "error.access": "You need to be logged in to access this page.",
    "error.access.feature": "You need to be logged in.",
    "error.failed": "Error",
    "error.favoriteActionFailed": "Failed to update favorite status",
    "error.specificLoadFailed": "Error: {message}",
    "err.error": "error",
    "rt.retry": "Retry",
    "accss.denied": "Access Denied",
    "error.notFound": "Oops! Page not found",

    // Hero Section
    "hero.title": "Find Your Perfect Property",
    "hero.subtitle":
      "Whether you're looking to buy, sell, or rent, we have the perfect property for you.",
    "hero.search": "Search properties...",
    "hero.location": "Location",
    "hero.type": "Property Type",
    "hero.price": "Price Range",
    "hero.searchBtn": "Search Properties",

    // Property Types
    "type.apartment": "Apartment",
    "type.villa": "Villa",
    "type.land": "Land",
    "type.office": "Office",
    "type.shop": "Shop",

    // Common
    "common.sale": "For Sale",
    "common.rent": "For Rent",
    "common.bedrooms": "Bedrooms",
    "common.bathrooms": "Bathrooms",
    "common.area": "Area",
    "common.price": "Price",
    "common.location": "Location",
    "common.description": "Description",
    "common.images": "Images",
    "common.save": "Save",
    "common.cancel": "Cancel",
    "common.edit": "Edit",
    "common.delete": "Delete",
    "common.view": "View Details",
    "common.contact": "Contact Seller",
    "common.close": "Close",
    "common.loading": "Loading...",
    "common.loadingProperty": "Loading property details...",
    "common.back": "Back",
    "common.loading.profile": "Loading profile...",
    "common.returnHome": "Return to home",
    "common.loadingProperties": "Loading properties data...",
    "common.retry": "Retry",
    "common.all": "All",

    // Authentication
    "auth.email": "Email",
    "auth.required": "Login Required",
    "auth.password": "Password",
    "auth.phone": "Phone",
    "auth.confirmPassword": "Confirm Password",
    "auth.name": "Name",
    "auth.userType": "Account Type",
    "auth.buyer": "Buyer",
    "auth.seller": "Seller",
    "auth.login": "Login",
    "auth.register": "Register",
    "auth.forgotPassword": "Forgot Password?",
    "auth.resetPassword": "Reset Password",
    "auth.loginTitle": "Welcome Back",
    "auth.registerTitle": "Create Account",
    "auth.loginSubtitle": "Sign in to your account",
    "auth.registerSubtitle": "Join our property platform",
    "auth.noAccount": "Don't have an account?   ",
    "auth.haveAccount": "Already have an account?   ",

    //Settings
    "stt.manageTitle": "Manage your account and preferences",
    "stt.appearance": "Appearance",
    "stt.dangerZone": "Danger Zone",

    // Dashboard
    "dashboard.welcome": "Welcome back",
    "dashboard.stats": "Your Statistics",
    "dashboard.properties": "Properties",
    "dashboard.views": "Total Views",
    "dashboard.inquiries": "Inquiries",
    "dashboard.addProperty": "Add New Property",
    "dashboard.myProperties": "My Properties",
    "dashboard.recentProperties": "Recent Properties",

    // Add Property
    "add.title": "Add New Property",
    "add.propertyTitle": "Property Title",
    "add.propertyType": "Property Type",
    "add.listingType": "Listing Type",
    "add.price": "Price",
    "add.city": "City",
    "add.area": "Area",
    "add.address": "Full Address",
    "add.bedrooms": "Number of Bedrooms",
    "add.bathrooms": "Number of Bathrooms",
    "add.size": "Size (mÂ²)",
    "add.description": "Property Description",
    "add.images": "Property Images",
    "add.uploadImages": "Upload Images",

    //props
    "props.empty": "No properties available",
    "props.featured": "Featured Properties",
    "props.discover": "Discover the best properties available",
    "props.viewAll": "View All Properties",
    "props.changeFilters": "Try adjusting your filters for better results",

    "m.month": "/month",

    // Search & Filters
    "search.results": "Search Results",
    "search.filters": "Filters",
    "search.priceRange": "Price Range",
    "search.minPrice": "Min Price",
    "search.maxPrice": "Max Price",
    "search.applyFilters": "Apply Filters",
    "search.clearFilters": "Clear Filters",
    "search.sortBy": "Sort By",
    "search.newest": "Newest First",
    "search.oldest": "Oldest First",
    "search.priceLow": "Price: Low to High",
    "search.priceHigh": "Price: High to Low",

    // AI Chat
    "aiChat.title": "Casa AI",
    "aiChat.description": 'Ask anything about "{title}".',
    "aiChat.apiKeyPlaceholder": "Enter your Gemini API Key here (for testing)",
    "aiChat.startConversation": "Ask a question to get started!",
    "aiChat.inputPlaceholder": "Ask about amenities, neighborhood, etc.",
    "aiChat.askAi": "Ask Casa AI",
    "aiChat.globalDescription": "Ask me about our properties!",

    //Fav
    "fav.loading": "Loading favorites...",
    "fav.error": "Failed to load favorites:",
    "fav.error.update": "Error updating favorites",
    "fav.properties": "Favorite Properties",
    "fav.emtpy.title": "No Favorite Properties",
    "fav.empty": "You haven't added any properties to your favorites yet.",
    "fav.added": "Added to favorites",
    "fav.removed": "Removed from favorites",
    "fav.updated": "Updated",
    "brs.browse": "Browse Properties",

    // Map and Route
    "map.calculatingRoute": "Calculating route...",
    "map.locationPermissionRequired": "Location Permission Required",
    "map.enableLocationMessage": "Please enable location access to see the route to this property.",
    "map.tryAgain": "Try Again",
    "map.routeError": "Route Error",
    "map.retry": "Retry",
    "map.yourLocation": "Your Location",
    "map.destination": "Property Location",
    "map.geolocationNotSupported": "Geolocation is not supported by this browser.",
    "map.noRouteFound": "No route could be found.",
    "map.networkError": "Network Error: Could not connect to the routing service. Please check your internet connection.",
    "map.unknownError": "An unknown error occurred.",
    "map.locationRequired": "Your location is required to get directions.",
    "map.propertyLocation": "Property Location",

    // Form validation and messages
    "form.passwordMismatch": "Password mismatch",
    "form.passwordsDoNotMatch": "Passwords do not match",
    "form.registrationFailed": "Registration failed",
    "form.checkInputAndTryAgain": "Please check your input and try again",
    "form.propertyAddedSuccessfully": "Property added successfully",
    "form.propertyListingPublished": "Your property listing has been published",
    "form.failedToAddProperty": "Failed to add property",
    "form.errorOccurredTryAgain": "An error occurred, please try again",
    "form.basicInformation": "Basic Information",
    "form.enterPropertyTitleEnglish": "Enter property title in English",
    "form.english": "English",
    "form.arabic": "Arabic",

    // Currency and loading states
    "currency.converting": "Converting...",
    "currency.loading": "...",

    // Voice chat
    "voice.thinking": "Thinking...",
    "voice.aiSpeaking": "AI Speaking...",
    "voice.listening": "Listening...",
    "voice.clickToSpeak": "Click to speak",
    "voice.startVoiceChat": "Start Voice Chat",
    "voice.endConversation": "End",
    "voice.testVoice": "Test Voice",

    // Amenities
    "amenities.swimmingPool": "Swimming Pool",
    "amenities.gymFitness": "Gym & Fitness Center",
    "amenities.coveredParking": "Covered Parking",
    "amenities.security24": "24/7 Security",
    "amenities.balconyView": "Balcony with View",
    "amenities.builtInWardrobes": "Built-in Wardrobes",
    "amenities.centralAC": "Central AC",
    "amenities.conciergeService": "Concierge Service",

    // Property stats
    "property.views": "Views",

    // Search and filters
    "search.adType": "Ad Type",
    "search.selectAdType": "Select ad type",
    "search.allAdTypes": "All Ad Types",
    "search.mostViewed": "Most Viewed",
  },
  ar: {
    // Navigation
    "nav.home": "Ø§ÙØ±Ø¦ÙØ³ÙØ©",
    "nav.properties": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª",
    "nav.dashboard": "ÙÙØ­Ø© Ø§ÙØªØ­ÙÙ",
    "nav.login": "ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ",
    "nav.register": "Ø¥ÙØ´Ø§Ø¡ Ø­Ø³Ø§Ø¨",
    "nav.logout": "ØªØ³Ø¬ÙÙ Ø§ÙØ®Ø±ÙØ¬",
    "nav.language": "Ø§ÙØ¹Ø±Ø¨ÙØ©",
    "nav.profile": "Ø§ÙÙÙÙ Ø§ÙØ´Ø®ØµÙ",
    "nav.settings": "Ø§ÙØ¥Ø¹Ø¯Ø§Ø¯Ø§Øª",
    "nav.profileActions": "Ø¥Ø¬Ø±Ø§Ø¡Ø§Øª Ø§ÙÙÙÙ Ø§ÙØ´Ø®ØµÙ",
    "nav.light": "Ø§ÙÙØ¶Ø¹ Ø§ÙÙØ§ØªØ­",
    "nav.dark": "Ø§ÙÙØ¶Ø¹ Ø§ÙØ¯Ø§ÙÙ",
    "nav.currency": "Ø§ÙØ¹ÙÙØ©",
    "nav.favorites": "Ø§ÙÙÙØ¶ÙØ©",
    "nav.owner": "ÙÙØ­Ø© ØªØ­ÙÙ Ø§ÙÙØ§ÙÙ",

    //Owner
    "owner.subtitle": "Ø¥Ø¯Ø§Ø±Ø© Ø§ÙÙÙØªÙÙØ§Øª Ø§ÙØ®Ø§ØµØ© Ø¨Ù ÙØªØªØ¨Ø¹ Ø§ÙØ£Ø¯Ø§Ø¡",
    "owner.addProperty": "Ø£Ø¶Ù Ø¹ÙØ§Ø±",
    "owner.totalProperties": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙÙÙÙØ©",
    "owner.activeListings": "Ø§ÙÙÙØ§Ø¦Ù Ø§ÙÙØ´Ø·Ø©",
    "owner.totalValue": "Ø§ÙÙÙÙØ© Ø§ÙÙÙÙØ©",
    "owner.error.statsLoadFailed": "ÙØ´Ù ÙÙ ØªØ­ÙÙÙ Ø¥Ø­ØµØ§Ø¦ÙØ§Øª ÙÙØ­Ø© Ø§ÙØªØ­ÙÙ",
    "owner.noProperties": "ÙØ§ ØªÙØ¬Ø¯ Ø¹ÙØ§Ø±Ø§Øª Ø¨Ø¹Ø¯",
    "owner.noPropertiesDescription": "Ø§Ø¨Ø¯Ø£ Ø¨Ø¥Ø¶Ø§ÙØ© Ø£ÙÙ Ø¹ÙØ§Ø± ÙÙ",
    "owner.addFirstProperty": "Ø£Ø¶Ù Ø¹ÙØ§Ø±Ù Ø§ÙØ£ÙÙ",

    // Toast messages
    "toast.logoutSuccess": "ØªÙ ØªØ³Ø¬ÙÙ Ø§ÙØ®Ø±ÙØ¬ Ø¨ÙØ¬Ø§Ø­",
    "toast.seeYouAgain": "ÙØ±Ø§Ù ÙØ±ÙØ¨Ø§Ù!",
    "toast.logoutFailed": "ÙØ´Ù ÙÙ ØªØ³Ø¬ÙÙ Ø§ÙØ®Ø±ÙØ¬",
    "toast.error": "Ø­Ø¯Ø« Ø®Ø·Ø£",

    // Error messages
    "error.loadFailed": "ÙØ´Ù ØªØ­ÙÙÙ Ø§ÙØ¹ÙØ§Ø±",
    "error.loadProfile": "ÙØ´Ù ØªØ­ÙÙÙ ÙÙÙÙ Ø§ÙØ´Ø®ØµÙ",
    "error.tryAgain":
      "Ø­Ø¯Ø«Øª ÙØ´ÙÙØ© ÙÙ Ø¬ÙØ¨ Ø§ÙØ¹ÙØ§Ø±Ø§Øª. ÙØ±Ø¬Ù Ø§ÙÙØ­Ø§ÙÙØ© ÙØ±Ø© Ø£Ø®Ø±Ù ÙÙ ÙÙØª ÙØ§Ø­Ù.",
    "error.access": "ÙØ¬Ø¨ ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ ÙÙÙØµÙÙ Ø¥ÙÙ ÙØ°Ù Ø§ÙØµÙØ­Ø©.",
    "error.access.feature": "ÙØ¬Ø¨ Ø¹ÙÙÙ ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ.",
    "error.failed": "Ø®Ø·Ø£",
    "error.favoriteActionFailed": "ÙØ´Ù ÙÙ ØªØ­Ø¯ÙØ« Ø­Ø§ÙØ© Ø§ÙÙÙØ¶ÙØ©",
    "error.specificLoadFailed": "Ø®Ø·Ø£: {message}",
    "err.error": "Ø­Ø¯Ø« Ø®Ø·Ø£",
    "rt.retry": "Ø£Ø¹Ø¯ Ø§ÙÙØ­Ø§ÙÙØ©",
    "accss.denied": "Ø§ÙÙØµÙÙ ÙØ±ÙÙØ¶",
    "error.notFound": "Ø£Ø³Ù! Ø§ÙØµÙØ­Ø© ØºÙØ± ÙÙØ¬ÙØ¯Ø©",

    // Hero Section
    "hero.title": "Ø§Ø¹Ø«Ø± Ø¹ÙÙ Ø§ÙØ¹ÙØ§Ø± Ø§ÙÙØ«Ø§ÙÙ",
    "hero.subtitle":
      "Ø³ÙØ§Ø¡ ÙÙØª ØªØ¨Ø­Ø« Ø¹Ù Ø§ÙØ´Ø±Ø§Ø¡ Ø£Ù Ø§ÙØ¨ÙØ¹ Ø£Ù Ø§ÙØ¥ÙØ¬Ø§Ø±Ø ÙÙØ¯ÙÙØ§ Ø§ÙØ¹ÙØ§Ø± Ø§ÙÙØ«Ø§ÙÙ ÙÙ.",
    "hero.search": "Ø§ÙØ¨Ø­Ø« Ø¹Ù Ø§ÙØ¹ÙØ§Ø±Ø§Øª...",
    "hero.location": "Ø§ÙÙÙÙØ¹",
    "hero.type": "ÙÙØ¹ Ø§ÙØ¹ÙØ§Ø±",
    "hero.price": "ÙØ·Ø§Ù Ø§ÙØ³Ø¹Ø±",
    "hero.searchBtn": "Ø§ÙØ¨Ø­Ø« Ø¹Ù Ø§ÙØ¹ÙØ§Ø±Ø§Øª",

    // Property Types
    "type.apartment": "Ø´ÙØ©",
    "type.villa": "ÙÙÙØ§",
    "type.land": "Ø£Ø±Ø¶",
    "type.office": "ÙÙØªØ¨",
    "type.shop": "ÙØ­Ù ØªØ¬Ø§Ø±Ù",

    // Common
    "common.sale": "ÙÙØ¨ÙØ¹",
    "common.rent": "ÙÙØ¥ÙØ¬Ø§Ø±",
    "common.bedrooms": "ØºØ±Ù Ø§ÙÙÙÙ",
    "common.bathrooms": "Ø¯ÙØ±Ø§Øª Ø§ÙÙÙØ§Ù",
    "common.area": "Ø§ÙÙØ³Ø§Ø­Ø©",
    "common.price": "Ø§ÙØ³Ø¹Ø±",
    "common.location": "Ø§ÙÙÙÙØ¹",
    "common.description": "Ø§ÙÙØµÙ",
    "common.images": "Ø§ÙØµÙØ±",
    "common.save": "Ø­ÙØ¸",
    "common.cancel": "Ø¥ÙØºØ§Ø¡",
    "common.edit": "ØªØ¹Ø¯ÙÙ",
    "common.delete": "Ø­Ø°Ù",
    "common.view": "Ø¹Ø±Ø¶ Ø§ÙØªÙØ§ØµÙÙ",
    "common.contact": "Ø§ØªØµÙ Ø¨Ø§ÙØ¨Ø§Ø¦Ø¹",
    "common.close": "Ø¥ØºÙØ§Ù",
    "common.loading": "Ø¬Ø§Ø± Ø§ÙØªØ­ÙÙÙ...",
    "common.loadingProperty": "Ø¬Ø§Ø±Ù ØªØ­ÙÙÙ ÙØ¹ÙÙÙØ§Øª Ø§ÙØ¹ÙØ§Ø± ...",
    "common.back": "Ø§ÙØ¹ÙØ¯Ø©",
    "common.loading.profile": "ØªØ­ÙÙÙ ÙÙÙÙ Ø§ÙØ´Ø®ØµÙ ...",
    "common.returnHome": "Ø§ÙØ¹ÙØ¯Ø© Ø¥ÙÙ Ø§ÙØµÙØ­Ø© Ø§ÙØ±Ø¦ÙØ³ÙØ©",
    "common.loadingProperties": "Ø¬Ø§Ø±Ù ØªØ­ÙÙÙ Ø¨ÙØ§ÙØ§Øª Ø§ÙØ¹ÙØ§Ø±Ø§Øª...",
    "common.retry": "Ø£Ø¹Ø¯ Ø§ÙÙØ­Ø§ÙÙØ©",
    "common.all": "Ø§ÙÙÙ",

    // Authentication
    "auth.email": "Ø§ÙØ¨Ø±ÙØ¯ Ø§ÙØ¥ÙÙØªØ±ÙÙÙ",
    "auth.required": "ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ ÙØ·ÙÙØ¨",
    "auth.phone": "Ø±ÙÙ Ø§ÙÙØ§ØªÙ",
    "auth.password": "ÙÙÙØ© Ø§ÙÙØ±ÙØ±",
    "auth.confirmPassword": "ØªØ£ÙÙØ¯ ÙÙÙØ© Ø§ÙÙØ±ÙØ±",
    "auth.name": "Ø§ÙØ§Ø³Ù",
    "auth.userType": "ÙÙØ¹ Ø§ÙØ­Ø³Ø§Ø¨",
    "auth.buyer": "ÙØ´ØªØ±Ù",
    "auth.seller": "Ø¨Ø§Ø¦Ø¹",
    "auth.login": "ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ",
    "auth.register": "Ø¥ÙØ´Ø§Ø¡ Ø­Ø³Ø§Ø¨",
    "auth.forgotPassword": "ÙØ³ÙØª ÙÙÙØ© Ø§ÙÙØ±ÙØ±Ø",
    "auth.resetPassword": "Ø¥Ø¹Ø§Ø¯Ø© ØªØ¹ÙÙÙ ÙÙÙØ© Ø§ÙÙØ±ÙØ±",
    "auth.loginTitle": "ÙØ±Ø­Ø¨Ø§Ù Ø¨Ø¹ÙØ¯ØªÙ",
    "auth.registerTitle": "Ø¥ÙØ´Ø§Ø¡ Ø­Ø³Ø§Ø¨ Ø¬Ø¯ÙØ¯",
    "auth.loginSubtitle": "ØªØ³Ø¬ÙÙ Ø§ÙØ¯Ø®ÙÙ Ø¥ÙÙ Ø­Ø³Ø§Ø¨Ù",
    "auth.registerSubtitle": "Ø§ÙØ¶Ù Ø¥ÙÙ ÙÙØµØ© Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙØ®Ø§ØµØ© Ø¨ÙØ§",
    "auth.noAccount": "ÙÙØ³ ÙØ¯ÙÙ Ø­Ø³Ø§Ø¨Ø   ",
    "auth.haveAccount": "Ø£ÙØ¯ÙÙ Ø­Ø³Ø§Ø¨Ø   ",

    //Settings
    "stt.manageTitle": "Ø¥Ø¯Ø§Ø±Ø© Ø­Ø³Ø§Ø¨Ù ÙØªÙØ¶ÙÙØ§ØªÙ",
    "stt.appearance": "Ø§ÙÙØ¸ÙØ±",
    "stt.dangerZone": "ÙÙØ·ÙØ© Ø®Ø·ÙØ±Ø©",

    // Dashboard
    "dashboard.welcome": "ÙØ±Ø­Ø¨Ø§Ù Ø¨Ø¹ÙØ¯ØªÙ",
    "dashboard.stats": "Ø¥Ø­ØµØ§Ø¦ÙØ§ØªÙ",
    "dashboard.properties": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª",
    "dashboard.views": "Ø¥Ø¬ÙØ§ÙÙ Ø§ÙÙØ´Ø§ÙØ¯Ø§Øª",
    "dashboard.inquiries": "Ø§ÙØ§Ø³ØªÙØ³Ø§Ø±Ø§Øª",
    "dashboard.addProperty": "Ø¥Ø¶Ø§ÙØ© Ø¹ÙØ§Ø± Ø¬Ø¯ÙØ¯",
    "dashboard.myProperties": "Ø¹ÙØ§Ø±Ø§ØªÙ",
    "dashboard.recentProperties": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙØ­Ø¯ÙØ«Ø©",

    // Add Property
    "add.title": "Ø¥Ø¶Ø§ÙØ© Ø¹ÙØ§Ø± Ø¬Ø¯ÙØ¯",
    "add.propertyTitle": "Ø¹ÙÙØ§Ù Ø§ÙØ¹ÙØ§Ø±",
    "add.propertyType": "ÙÙØ¹ Ø§ÙØ¹ÙØ§Ø±",
    "add.listingType": "ÙÙØ¹ Ø§ÙØ¥Ø¹ÙØ§Ù",
    "add.price": "Ø§ÙØ³Ø¹Ø±",
    "add.city": "Ø§ÙÙØ¯ÙÙØ©",
    "add.area": "Ø§ÙÙÙØ·ÙØ©",
    "add.address": "Ø§ÙØ¹ÙÙØ§Ù Ø§ÙÙØ§ÙÙ",
    "add.bedrooms": "Ø¹Ø¯Ø¯ ØºØ±Ù Ø§ÙÙÙÙ",
    "add.bathrooms": "Ø¹Ø¯Ø¯ Ø¯ÙØ±Ø§Øª Ø§ÙÙÙØ§Ù",
    "add.size": "Ø§ÙÙØ³Ø§Ø­Ø© (ÙÂ²)",
    "add.description": "ÙØµÙ Ø§ÙØ¹ÙØ§Ø±",
    "add.images": "ØµÙØ± Ø§ÙØ¹ÙØ§Ø±",
    "add.uploadImages": "Ø±ÙØ¹ Ø§ÙØµÙØ±",

    //props
    "props.empty": "ÙØ§ ØªÙØ¬Ø¯ Ø¹ÙØ§Ø±Ø§Øª ÙØªØ§Ø­Ø©",
    "props.featured": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙÙÙÙØ²Ø©",
    "props.discover": "Ø§ÙØªØ´Ù Ø£ÙØ¶Ù Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙÙØªØ§Ø­Ø©",
    "props.viewAll": "Ø¹Ø±Ø¶ Ø¬ÙÙØ¹ Ø§ÙØ¹ÙØ§Ø±Ø§Øª",
    "props.changeFilters": "Ø¬Ø±Ø¨ ØªØ¹Ø¯ÙÙ Ø§ÙÙØ±Ø´Ø­Ø§Øª ÙÙØ­ØµÙÙ Ø¹ÙÙ ÙØªØ§Ø¦Ø¬ Ø£ÙØ¶Ù",
    "m.month": "/Ø´ÙØ±",

    // Search & Filters
    "search.results": "ÙØªØ§Ø¦Ø¬ Ø§ÙØ¨Ø­Ø«",
    "search.filters": "Ø§ÙÙØ±Ø´Ø­Ø§Øª",
    "search.priceRange": "ÙØ·Ø§Ù Ø§ÙØ³Ø¹Ø±",
    "search.minPrice": "Ø£ÙÙ Ø³Ø¹Ø±",
    "search.maxPrice": "Ø£Ø¹ÙÙ Ø³Ø¹Ø±",
    "search.applyFilters": "ØªØ·Ø¨ÙÙ Ø§ÙÙØ±Ø´Ø­Ø§Øª",
    "search.clearFilters": "ÙØ³Ø­ Ø§ÙÙØ±Ø´Ø­Ø§Øª",
    "search.sortBy": "ØªØ±ØªÙØ¨ Ø­Ø³Ø¨",
    "search.newest": "Ø§ÙØ£Ø­Ø¯Ø« Ø£ÙÙØ§Ù",
    "search.oldest": "Ø§ÙØ£ÙØ¯Ù Ø£ÙÙØ§Ù",
    "search.priceLow": "Ø§ÙØ³Ø¹Ø±: ÙÙ Ø§ÙØ£ÙÙ ÙÙØ£Ø¹ÙÙ",
    "search.priceHigh": "Ø§ÙØ³Ø¹Ø±: ÙÙ Ø§ÙØ£Ø¹ÙÙ ÙÙØ£ÙÙ",

    // AI Chat
    "aiChat.title": "ÙØ§Ø³Ø§ Ø§ÙØ°ÙØ§Ø¡ Ø§ÙØ§ØµØ·ÙØ§Ø¹Ù",
    "aiChat.description": 'Ø§Ø³Ø£Ù Ø£Ù Ø´ÙØ¡ Ø¹Ù "{title}".',
    "aiChat.apiKeyPlaceholder": "Ø£Ø¯Ø®Ù ÙÙØªØ§Ø­ Gemini API Ø§ÙØ®Ø§Øµ Ø¨Ù ÙÙØ§ (ÙÙØ§Ø®ØªØ¨Ø§Ø±)",
    "aiChat.startConversation": "Ø§Ø·Ø±Ø­ Ø³Ø¤Ø§ÙÙ ÙÙØ¨Ø¯Ø¡!",
    "aiChat.inputPlaceholder": "Ø§Ø³Ø£Ù Ø¹Ù ÙØ³Ø§Ø¦Ù Ø§ÙØ±Ø§Ø­Ø©Ø Ø§ÙØ­ÙØ Ø¥ÙØ®.",
    "aiChat.askAi": "Ø§Ø³Ø£Ù ÙØ§Ø³Ø§ Ø§ÙØ°ÙØ§Ø¡ Ø§ÙØ§ØµØ·ÙØ§Ø¹Ù",
    "aiChat.globalDescription": "Ø§Ø³Ø£ÙÙÙ Ø¹Ù Ø¹ÙØ§Ø±Ø§ØªÙØ§!",

    //Fav
    "fav.loading": "Ø¬Ø§Ø±Ù ØªØ­ÙÙÙ Ø§ÙÙÙØ¶ÙØ©...",
    "fav.error": "ÙØ´Ù ÙÙ ØªØ­ÙÙÙ Ø§ÙÙÙØ¶ÙØ©:",
    "fav.error.update": "Ø­Ø¯Ø« Ø®Ø·Ø£ ÙÙ ØªØ­Ø¯ÙØ« Ø§ÙÙÙØ¶ÙØ©",
    "fav.properties": "Ø§ÙØ¹ÙØ§Ø±Ø§Øª Ø§ÙÙÙØ¶ÙØ©",
    "fav.emtpy.title": "ÙØ§ ØªÙØ¬Ø¯ Ø¹ÙØ§Ø±Ø§Øª ÙÙØ¶ÙØ©",
    "fav.empty": "ÙÙ ØªÙÙ Ø¨Ø¥Ø¶Ø§ÙØ© Ø£Ù Ø¹ÙØ§Ø±Ø§Øª Ø¥ÙÙ Ø§ÙÙÙØ¶ÙØ© Ø¨Ø¹Ø¯.",
    "fav.added": "ØªÙØª Ø¥Ø¶Ø§ÙØ© Ø§ÙØ¹ÙØ§Ø± Ø¥ÙÙ Ø§ÙÙÙØ¶ÙØ©",
    "fav.updated": "ØªÙ Ø§ÙØªØ­Ø¯ÙØ«",
    "fav.removed": "ØªÙØª Ø¥Ø²Ø§ÙØ© Ø§ÙØ¹ÙØ§Ø± ÙÙ Ø§ÙÙÙØ¶ÙØ©",
    "brs.browse": "ØªØµÙØ­ Ø§ÙØ¹ÙØ§Ø±Ø§Øª",

    // Map and Route
    "map.calculatingRoute": "Ø¬Ø§Ø±Ù Ø­Ø³Ø§Ø¨ Ø§ÙÙØ³Ø§Ø±...",
    "map.locationPermissionRequired": "Ø¥Ø°Ù Ø§ÙÙÙÙØ¹ ÙØ·ÙÙØ¨",
    "map.enableLocationMessage": "ÙØ±Ø¬Ù ØªÙÙÙÙ Ø§ÙÙØµÙÙ Ø¥ÙÙ Ø§ÙÙÙÙØ¹ ÙØ±Ø¤ÙØ© Ø§ÙÙØ³Ø§Ø± Ø¥ÙÙ ÙØ°Ø§ Ø§ÙØ¹ÙØ§Ø±.",
    "map.tryAgain": "Ø­Ø§ÙÙ ÙØ±Ø© Ø£Ø®Ø±Ù",
    "map.routeError": "Ø®Ø·Ø£ ÙÙ Ø§ÙÙØ³Ø§Ø±",
    "map.retry": "Ø¥Ø¹Ø§Ø¯Ø© Ø§ÙÙØ­Ø§ÙÙØ©",
    "map.yourLocation": "ÙÙÙØ¹Ù",
    "map.destination": "ÙÙÙØ¹ Ø§ÙØ¹ÙØ§Ø±",
    "map.geolocationNotSupported": "ØªØ­Ø¯ÙØ¯ Ø§ÙÙÙÙØ¹ Ø§ÙØ¬ØºØ±Ø§ÙÙ ØºÙØ± ÙØ¯Ø¹ÙÙ ÙÙ ÙØ°Ø§ Ø§ÙÙØªØµÙØ­.",
    "map.noRouteFound": "ÙÙ ÙØªÙ Ø§ÙØ¹Ø«ÙØ± Ø¹ÙÙ ÙØ³Ø§Ø±.",
    "map.networkError": "Ø®Ø·Ø£ ÙÙ Ø§ÙØ´Ø¨ÙØ©: ÙØ§ ÙÙÙÙ Ø§ÙØ§ØªØµØ§Ù Ø¨Ø®Ø¯ÙØ© Ø§ÙÙØ³Ø§Ø±. ÙØ±Ø¬Ù Ø§ÙØªØ­ÙÙ ÙÙ Ø§ØªØµØ§Ù Ø§ÙØ¥ÙØªØ±ÙØª.",
    "map.unknownError": "Ø­Ø¯Ø« Ø®Ø·Ø£ ØºÙØ± ÙØ¹Ø±ÙÙ.",
    "map.locationRequired": "ÙÙÙØ¹Ù ÙØ·ÙÙØ¨ ÙÙØ­ØµÙÙ Ø¹ÙÙ Ø§ÙØ§ØªØ¬Ø§ÙØ§Øª.",
    "map.propertyLocation": "ÙÙÙØ¹ Ø§ÙØ¹ÙØ§Ø±",

    // Form validation and messages
    "form.passwordMismatch": "ÙÙÙØ§Øª Ø§ÙÙØ±ÙØ± ØºÙØ± ÙØªØ·Ø§Ø¨ÙØ©",
    "form.passwordsDoNotMatch": "ÙÙÙØ§Øª Ø§ÙÙØ±ÙØ± ØºÙØ± ÙØªØ·Ø§Ø¨ÙØ©",
    "form.registrationFailed": "ÙØ´Ù Ø§ÙØªØ³Ø¬ÙÙ",
    "form.checkInputAndTryAgain": "ÙØ±Ø¬Ù Ø§ÙØªØ­ÙÙ ÙÙ Ø§ÙÙØ¯Ø®ÙØ§Øª ÙØ§ÙÙØ­Ø§ÙÙØ© ÙØ±Ø© Ø£Ø®Ø±Ù",
    "form.propertyAddedSuccessfully": "ØªÙ Ø¥Ø¶Ø§ÙØ© Ø§ÙØ¹ÙØ§Ø± Ø¨ÙØ¬Ø§Ø­",
    "form.propertyListingPublished": "ØªÙ ÙØ´Ø± Ø¥Ø¹ÙØ§Ù Ø§ÙØ¹ÙØ§Ø± Ø§ÙØ®Ø§Øµ Ø¨Ù",
    "form.failedToAddProperty": "ÙØ´Ù ÙÙ Ø¥Ø¶Ø§ÙØ© Ø§ÙØ¹ÙØ§Ø±",
    "form.errorOccurredTryAgain": "Ø­Ø¯Ø« Ø®Ø·Ø£Ø ÙØ±Ø¬Ù Ø§ÙÙØ­Ø§ÙÙØ© ÙØ±Ø© Ø£Ø®Ø±Ù",
    "form.basicInformation": "Ø§ÙÙØ¹ÙÙÙØ§Øª Ø§ÙØ£Ø³Ø§Ø³ÙØ©",
    "form.enterPropertyTitleEnglish": "Ø£Ø¯Ø®Ù Ø¹ÙÙØ§Ù Ø§ÙØ¹ÙØ§Ø± Ø¨Ø§ÙØ¥ÙØ¬ÙÙØ²ÙØ©",
    "form.english": "Ø¨Ø§ÙØ¥ÙØ¬ÙÙØ²ÙØ©",
    "form.arabic": "Ø¨Ø§ÙØ¹Ø±Ø¨ÙØ©",

    // Currency and loading states
    "currency.converting": "Ø¬Ø§Ø±Ù Ø§ÙØªØ­ÙÙÙ...",
    "currency.loading": "...",

    // Voice chat
    "voice.thinking": "Ø¬Ø§Ø±Ù Ø§ÙØªÙÙÙØ±...",
    "voice.aiSpeaking": "ÙØªØ­Ø¯Ø« Ø§ÙÙØ³Ø§Ø¹Ø¯...",
    "voice.listening": "Ø£Ø³ØªÙØ¹ Ø¥ÙÙÙ...",
    "voice.clickToSpeak": "Ø§Ø¶ØºØ· ÙÙØªØ­Ø¯Ø«",
    "voice.startVoiceChat": "Ø§Ø¨Ø¯Ø£ Ø§ÙÙØ­Ø§Ø¯Ø«Ø© Ø§ÙØµÙØªÙØ©",
    "voice.endConversation": "Ø¥ÙÙØ§Ø¡",
    "voice.testVoice": "Ø§Ø®ØªØ¨Ø§Ø± Ø§ÙØµÙØª",

    // Amenities
    "amenities.swimmingPool": "Ø­ÙØ§Ù Ø³Ø¨Ø§Ø­Ø©",
    "amenities.gymFitness": "ØµØ§ÙØ© Ø±ÙØ§Ø¶ÙØ© ÙÙØ±ÙØ² ÙÙØ§ÙØ©",
    "amenities.coveredParking": "ÙÙÙÙ ÙØºØ·Ù",
    "amenities.security24": "Ø£ÙÙ Ø¹ÙÙ ÙØ¯Ø§Ø± Ø§ÙØ³Ø§Ø¹Ø©",
    "amenities.balconyView": "Ø´Ø±ÙØ© Ø¨Ø¥Ø·ÙØ§ÙØ©",
    "amenities.builtInWardrobes": "Ø®Ø²Ø§Ø¦Ù ÙØ¯ÙØ¬Ø©",
    "amenities.centralAC": "ØªÙÙÙÙ ÙØ±ÙØ²Ù",
    "amenities.conciergeService": "Ø®Ø¯ÙØ© Ø§ÙÙÙÙØ³ÙØ±Ø¬",

    // Property stats
    "property.views": "Ø§ÙÙØ´Ø§ÙØ¯Ø§Øª",

    // Search and filters
    "search.adType": "ÙÙØ¹ Ø§ÙØ¥Ø¹ÙØ§Ù",
    "search.selectAdType": "Ø§Ø®ØªØ± ÙÙØ¹ Ø§ÙØ¥Ø¹ÙØ§Ù",
    "search.allAdTypes": "Ø¬ÙÙØ¹ Ø£ÙÙØ§Ø¹ Ø§ÙØ¥Ø¹ÙØ§ÙØ§Øª",
    "search.mostViewed": "Ø§ÙØ£ÙØ«Ø± ÙØ´Ø§ÙØ¯Ø©",
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [language, setLanguage] = useState<Language>("en");
  const [user, setUser] = useState<IUser | null>(null);
  const [isLanguageTransitioning, setIsLanguageTransitioning] = useState(false);

  useEffect(() => {
    const savedLanguage = localStorage.getItem("language") as Language;
    const savedUser = localStorage.getItem("user");

    if (savedLanguage) {
      setLanguage(savedLanguage);
    }

    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
      } catch (error) {
        console.log("Error parsing saved user:", error);
        localStorage.removeItem("user");
      }
    }
  }, []);

  const triggerLanguageAnimation = () => {
    setIsLanguageTransitioning(true);

    // Add language transition class to body
    document.body.classList.add('language-transition');

    // Add content fade effect
    const contentElements = document.querySelectorAll('main, .content-fade');
    contentElements.forEach(el => {
      el.classList.add('content-fade', 'transitioning');
    });

    setTimeout(() => {
      // Remove transition classes
      document.body.classList.remove('language-transition');
      contentElements.forEach(el => {
        el.classList.remove('transitioning');
      });
      setIsLanguageTransitioning(false);
    }, 600);
  };

  useEffect(() => {
    localStorage.setItem("language", language);
    document.documentElement.dir = language === "ar" ? "rtl" : "ltr";
    document.documentElement.lang = language;

    // Add smooth transition classes
    document.body.classList.add('smooth-colors');
    document.documentElement.classList.add('rtl-transition');

    if (language === "ar") {
      document.body.style.fontFamily = "Rubik, sans-serif";
    } else {
      document.body.style.fontFamily = "Poppins, sans-serif";
    }
  }, [language]);

  const t = (
    key: string,
    options?: { [key: string]: string | number }
  ): string => {
    let text = translations[language][key] || key;
    if (options && text) {
      Object.keys(options).forEach((v) => {
        const regex = new RegExp(`{${v}}`, "g");
        text = text.replace(regex, String(options[v]));
      });
    }
    return text;
  };

  const login = (newUser: IUser) => {
    setUser(newUser);
    localStorage.setItem("user", JSON.stringify(newUser));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  const hasToken = () => {
    try {
      const userData = localStorage.getItem("user");
      if (userData) {
        const parsedUser = JSON.parse(userData);
        return !!parsedUser?.token;
      }
      return false;
    } catch {
      return false;
    }
  };

  const isRTL = language === "ar";
  const isAuthenticated = !!user;

  return (
    <LanguageContext.Provider
      value={{
        language,
        setLanguage,
        isRTL,
        t,
        user,
        login,
        logout,
        isAuthenticated,
        hasToken,
        isLanguageTransitioning,
        triggerLanguageAnimation,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components
export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};
